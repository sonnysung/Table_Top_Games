Classes
    Cards
        Type -- Wasabi, Maki, Sashimi, Dumplings, etc
        Value -- If they contain a value, 
            like Maki (1-3 amounts per card)
            like Nigiri (1-3 value per card)
            Or we can do individual cards instead of the amount
        
        Variables
            //Wasabi, Maki, Sashimi, etc...
            eNum Type
            //Value for Maki and Nigiri
            unsigned int Value
        Members
            //Return the Type
            getType
            //Return the Value, 0 if has no value
            getValue
            
        
    Hand
        Container of cards, stacks that are passed
        
        Variables
            //List that contains all the cards in the hand
            List Cards  
        Members
            //Return list that contains all the cards in the hand            
            getCards()
            //Remove Card from the List of Cards
            removeCard(Card c)
            //Add Card to the List of Cards
            addCard(Card c)
            //Play chopstick, draw two cards and add Chopstick back to deck
            playChopStick(Card c1, Card c2)
    
    Deck
        Contains all the cards, cards are drawn from here into the Hands
        Variables
            //List that contains all the cards in the deck
            List Cards
        Members
            //initializes the deck from a set amount of cards
            initialize(Set of cards)
            //shuffle deck
            shuffle()
            //remove card from the deck
            takecard()
            //remove multiple cards from the deck
            takecards(unsigned number_of_cards)
    
    Played
        Contains cards played by the player in that round
        Keeps track of order because might need for combos
        Keeps track of last played because might need for combos
        
        Variables
            //List that contains all the cards played by a player
            List Cards
        Members
            //Get a list that contains all the cards played by the player
            getCards()
            //Returns the last card played by the player
            getLastCardPlayed()
            
                    
    Player
        A person that takes part in the game
        Can do actions with Hand
        Owner of Played
        *Special Cards
            Chop Sticks -- allows two cards to be played per hand, discarded after use
            Pudding -- Bonus or penality at the end of the game (not end of round), +6 pts for most, -6 for lease.
        Pick card
        Use chopstick
        
            
        Variables
        
        Members
            //Pick card from hand
            pickCard( deck, card );
            
    
    Score
        Keeps a tally of the score for the round, based on the Score Calculation

Score Calculation
    Calculates score based on all Played hands from the round
        *Tempura Pairs
        *Sashimi Triples
        *Dumpling Stacks
        *Maki -- most of, 2nd most of
        *Wasabi/Nigiri, pairs, 3*Nigiri(value)
        *Nigiri
        

Strats -- the fun part
    Approaches
    ----------
        Greedy --Pick the card with the highest possible outcome, even tho it is not guaranteed
            ie. Pick Sasahimi, because it has the highest possible outcome of 10 (if you have 3),
                    *If you have seen all other hands, you will have an idea if the multiples are possible.
                        ie. There is only 2 Sashimis in all the hands in the round, skip picking Sashimis
                        
        Safe  --Pick the highest value card with guaranteed value
            ie. Pick Nigiri or Dumpling because it is a guaranteed value
            
        Offensive --More advanced strat of denying combos to other players
            ie. If a player is collecting Tempura pairs, pick Tempura to deny them points. Same with Sasahimi.
            
        Attack Player X 
            Use Offensive tactics against Player X
            Help friendly Players by not taking beneficial combo cards from hand.
                *Make sure Player X doesn't also benefit from leaving them in
            Bit tricky to implement.
            
Picking A Card
    Immediate Value
        Points that will be added immediately from the selection, absolute minimum this card will add to the player score
            *Some have a value of 0 -- combos, multiplers, etc
                *Chopstick is a special card which allows for the selection of 2 cards sometime in the future
            *Some will have a finite value
    Possible Value
        Points that are based on combos
            *Wasabi followed by Nigiris
            *Etc

Program Flow
    Main
        Call Sushi Go Game
            Ask for number of players
            
            
Implementation
    1. Get Based Game Working with classes and all rules.
    2. No AI for CPU players, infact all players are human controlled
    3. Verify that rules and game plays out correctly. Check official rules for details.
        Implement simple 2 person game first
    4. Implement Stupid AI which picks a random card
    5. Implement Smarter ID, Human-like AI
    6. Test out Strats
    7. Use Strats in real life!
    8. Make an app to do stuff...